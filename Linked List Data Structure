#Each data in the Linked list would be a node object
class Node:
    def __init__(self, data=None):
        self.data = data
        self.next = None
        
class LinkedList:
    def __init__(self):
        self.head = Node()
    
    #this is to append a new data at the end of the linked list
    def append(self,data):
        new_node = Node(data)
        cur_node = self.head
        while cur_node.next != None:
            cur_node = cur_node.next
        cur_node.next = new_node
    
    #length of the LL at a given time
    def length(self):
        cur_node = self.head
        total = 0
        while cur_node.next != None:
            total += 1
            cur_node = cur_node.next
        return(total)
    
    #visualize the LL at any point
    def display(self):
        elements = []
        cur_node = self.head
        while cur_node.next != None:
            cur_node = cur_node.next
            elements.append(cur_node.data)
        print(elements)
        
    #to get data at a particular index in the LL
    def get(self, index):
        if index >= self.length():
            print("ERROR: 'Get' Index out of range")
            return None
        cur_idx = 0
        cur_node = self.head
        while True:
            cur_node = cur_node.next
            if index == cur_idx:
                return cur_node.data
            cur_idx += 1
    
    #to erase or delete data at a particular index in the LL
    def erase(self,index):
        if index >= self.length():
            print("ERROR: 'Get' Index out of range")
            return 
        cur_idx = 0
        cur_node = self.head
        while True:
            last_node = cur_node
            cur_node = cur_node.next
            if index == cur_idx:
                last_node.next = cur_node.next
                return
            cur_idx += 1
